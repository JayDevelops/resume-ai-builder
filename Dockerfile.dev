# Base image
FROM node:18-alpine

# Set the working directory
WORKDIR /app

# Copy only the package.json and lockfile for installing dependencies
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Install dependencies based on the preferred package manager
RUN \
    if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
    elif [ -f package-lock.json ]; then npm ci --legacy-peer-deps; \
    elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install; \
    else echo "Warning: No lockfile found. Using 'npm install'." && npm install; \
    fi

# Copy the rest of the source code
COPY app ./app
COPY public ./public
COPY components ./components
COPY lib ./lib
COPY next.config.ts .
COPY prisma ./prisma
COPY components.json .
COPY tailwind.config.ts .
COPY tsconfig.json .
COPY postcss.config.mjs .
COPY auth.ts .
COPY middleware.ts .

# Environment variables must be present at build time
# https://github.com/vercel/next.js/discussions/14030
ARG POSTGRES_DB_URL
ENV POSTGRES_DB_URL=${POSTGRES_DB_URL}

# Authentication environment variables
ARG AUTH_GITHUB_ID
ENV AUTH_GITHUB_ID=${AUTH_GITHUB_ID}
ARG AUTH_GITHUB_SECRET
ENV AUTH_GITHUB_SECRET=${AUTH_GITHUB_SECRET}

ARG AUTH_GOOGLE_ID
ENV AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
ARG AUTH_GOOGLE_SECRET
ENV AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}

# Other environment variables
ARG BASIC_AUTH_USER
ENV BASIC_AUTH_USER=${BASIC_AUTH_USER}
ARG BASIC_AUTH_PASSWORD
ENV BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}


# Expose the development port
EXPOSE 3000

# Set environment variables for local development
ENV NODE_ENV=development

# Run the Next.js development server
CMD ["npm", "run", "dev"]
